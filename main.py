"""
Punto de entrada principal del sistema de optimizaci√≥n de alimentos para pollos.

Este m√≥dulo coordina todo el proceso de optimizaci√≥n:
- Recibe par√°metros del usuario
- Carga la base de conocimiento
- Ejecuta el algoritmo gen√©tico
- Genera reportes de resultados
"""

import sys
import traceback
from datetime import datetime
import argparse

# Importaciones del sistema
from config import (
    SISTEMA_INFO, 
    ALGORITMO_CONFIG, 
    mostrar_informacion_sistema,
    inicializar_directorios,
    validar_configuracion
)

from conocimiento import (
    INGREDIENTES, 
    REQUERIMIENTOS_NUTRICIONALES,
    RAZAS_POLLOS,
    PROVEEDORES,
    validar_consistencia_datos
)

from genetic import AlgoritmoGenetico, Individuo
from genetic.fitness import calcular_fitness_adaptativo

from utils import (
    procesar_entradas,
    validar_parametros_produccion,
    mostrar_resumen_parametros,
    generar_reporte_sistema_completo,
    cargar_parametros_desde_archivo,
    guardar_parametros_en_archivo
)

def main():
    """
    Funci√≥n principal del sistema
    """
    try:
        # Mostrar informaci√≥n del sistema
        mostrar_informacion_sistema()
        
        # Validar configuraci√≥n del sistema
        if not validar_sistema():
            return 1
        
        # Procesar argumentos de l√≠nea de comandos
        args = procesar_argumentos()
        
        # Obtener par√°metros del usuario
        parametros_usuario = obtener_parametros_usuario(args)
        if not parametros_usuario:
            print("‚ùå No se pudieron obtener los par√°metros del usuario")
            return 1
        
        # Mostrar resumen de par√°metros
        mostrar_resumen_parametros(parametros_usuario)
        
        # Confirmar ejecuci√≥n
        if not args.auto_confirmar and not confirmar_ejecucion():
            print("üö´ Ejecuci√≥n cancelada por el usuario")
            return 0
        
        # Ejecutar optimizaci√≥n
        resultados = ejecutar_optimizacion(parametros_usuario)
        if not resultados or "error" in resultados:
            print(f"‚ùå Error en la optimizaci√≥n: {resultados.get('error', 'Error desconocido')}")
            return 1
        
        # Generar reportes
        generar_reportes_finales(resultados, parametros_usuario, args)
        
        print(f"\nüéâ ¬°Optimizaci√≥n completada exitosamente!")
        return 0
        
    except KeyboardInterrupt:
        print(f"\n‚èπÔ∏è  Proceso interrumpido por el usuario")
        return 130
    except Exception as e:
        print(f"\nüí• Error inesperado: {e}")
        if "--debug" in sys.argv:
            print(f"\nTraceback completo:")
            traceback.print_exc()
        return 1

def procesar_argumentos():
    """
    Procesa argumentos de l√≠nea de comandos
    
    Returns:
        Objeto args con argumentos parseados
    """
    parser = argparse.ArgumentParser(
        description=f"{SISTEMA_INFO['nombre']} - {SISTEMA_INFO['descripcion']}",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog=f"""
Ejemplos de uso:
  python {sys.argv[0]}                          # Modo interactivo
  python {sys.argv[0]} --config params.json    # Cargar par√°metros desde archivo
  python {sys.argv[0]} --auto-confirmar        # Ejecutar sin confirmaci√≥n
  python {sys.argv[0]} --solo-reportes         # Solo generar reportes
        """
    )
    
    parser.add_argument("--version", action="version", 
                       version=f"{SISTEMA_INFO['nombre']} v{SISTEMA_INFO['version']}")
    
    parser.add_argument("--config", metavar="ARCHIVO",
                       help="Cargar par√°metros desde archivo JSON")
    
    parser.add_argument("--auto-confirmar", action="store_true",
                       help="Ejecutar sin solicitar confirmaci√≥n")
    
    parser.add_argument("--solo-reportes", action="store_true",
                       help="Solo generar reportes (requiere --config)")
    
    parser.add_argument("--sin-graficas", action="store_true",
                       help="No generar gr√°ficas en los reportes")
    
    parser.add_argument("--debug", action="store_true",
                       help="Mostrar informaci√≥n de depuraci√≥n")
    
    parser.add_argument("--guardar-config", metavar="ARCHIVO",
                       help="Guardar par√°metros capturados en archivo JSON")
    
    parser.add_argument("--tama√±o-problema", choices=["peque√±o", "mediano", "grande"],
                       help="Ajustar configuraci√≥n seg√∫n tama√±o del problema")
    
    return parser.parse_args()

def validar_sistema():
    """
    Valida que el sistema est√© correctamente configurado
    
    Returns:
        True si el sistema es v√°lido
    """
    print("üîç Validando configuraci√≥n del sistema...")
    
    # Validar configuraci√≥n
    config_valida, errores_config = validar_configuracion()
    if not config_valida:
        print("‚ùå Errores en configuraci√≥n:")
        for error in errores_config:
            print(f"   ‚Ä¢ {error}")
        return False
    
    # Validar base de conocimiento
    datos_validos, errores_datos = validar_consistencia_datos()
    if not datos_validos:
        print("‚ùå Errores en base de conocimiento:")
        for error in errores_datos:
            print(f"   ‚Ä¢ {error}")
        return False
    
    # Crear directorios necesarios
    inicializar_directorios()
    
    print("‚úÖ Sistema validado correctamente")
    return True

def obtener_parametros_usuario(args):
    """
    Obtiene par√°metros del usuario seg√∫n los argumentos
    
    Args:
        args: Argumentos de l√≠nea de comandos
        
    Returns:
        Diccionario con par√°metros del usuario
    """
    if args.config:
        # Cargar desde archivo
        print(f"üìÇ Cargando par√°metros desde: {args.config}")
        parametros = cargar_parametros_desde_archivo(args.config)
        
        if parametros is None:
            return None
        
        # Validar par√°metros cargados
        try:
            validar_parametros_produccion(
                parametros["raza"],
                parametros["edad_dias"],
                parametros["peso_actual"],
                parametros["peso_objetivo"]
            )
        except KeyError as e:
            print(f"‚ùå Par√°metro faltante en archivo: {e}")
            return None
        except Exception as e:
            print(f"‚ùå Error validando par√°metros: {e}")
            return None
        
        return parametros
    
    else:
        # Modo interactivo
        print("üéØ Iniciando captura interactiva de par√°metros...")
        parametros = procesar_entradas()
        
        # Guardar par√°metros si se solicita
        if parametros and args.guardar_config:
            guardar_parametros_en_archivo(parametros, args.guardar_config)
        
        return parametros

def confirmar_ejecucion():
    """
    Solicita confirmaci√≥n al usuario para ejecutar la optimizaci√≥n
    
    Returns:
        True si el usuario confirma
    """
    print(f"\n‚ùì ¬øDesea ejecutar la optimizaci√≥n con estos par√°metros?")
    respuesta = input("Escriba 'si' para continuar o cualquier otra cosa para cancelar: ").strip().lower()
    return respuesta in ['si', 's√≠', 's', 'yes', 'y']

def ejecutar_optimizacion(parametros_usuario):
    """
    Ejecuta el algoritmo de optimizaci√≥n
    
    Args:
        parametros_usuario: Par√°metros del usuario
        
    Returns:
        Resultados del algoritmo gen√©tico
    """
    print(f"\nüöÄ Iniciando optimizaci√≥n...")
    print("=" * 60)
    
    try:
        # Preparar configuraci√≥n del algoritmo
        config_algoritmo = preparar_configuracion_algoritmo(parametros_usuario)
        
        # Crear y ejecutar algoritmo gen√©tico
        algoritmo = AlgoritmoGenetico(config_algoritmo)
        resultados = algoritmo.ejecutar()
        
        return resultados
        
    except Exception as e:
        print(f"‚ùå Error durante la optimizaci√≥n: {e}")
        return {"error": str(e)}

def preparar_configuracion_algoritmo(parametros_usuario):
    """
    Prepara la configuraci√≥n para el algoritmo gen√©tico
    
    Args:
        parametros_usuario: Par√°metros del usuario
        
    Returns:
        Diccionario con configuraci√≥n del algoritmo
    """
    config = ALGORITMO_CONFIG.copy()
    
    # Configuraci√≥n de evaluaci√≥n
    config["config_evaluacion"] = {
        "raza": parametros_usuario["raza"],
        "edad_dias": parametros_usuario["edad_dias"],
        "peso_actual": parametros_usuario["peso_actual"],
        "peso_objetivo": parametros_usuario["peso_objetivo"],
        "cantidad_pollos": parametros_usuario["cantidad_pollos"]
    }
    
    # Datos del problema
    config["ingredientes_data"] = INGREDIENTES
    config["restricciones_usuario"] = parametros_usuario.get("restricciones_usuario")
    
    # Filtrar ingredientes disponibles si se especificaron
    ingredientes_disponibles = parametros_usuario.get("ingredientes_disponibles")
    if ingredientes_disponibles:
        # Aplicar filtro a las restricciones del usuario
        if not config["restricciones_usuario"]:
            from conocimiento.restricciones_usuario import RestriccionesUsuario
            config["restricciones_usuario"] = RestriccionesUsuario()
        
        # Establecer ingredientes disponibles
        config["restricciones_usuario"].ingredientes_disponibles = ingredientes_disponibles
    
    return config

def generar_reportes_finales(resultados, parametros_usuario, args):
    """
    Genera todos los reportes finales del sistema
    
    Args:
        resultados: Resultados del algoritmo gen√©tico
        parametros_usuario: Par√°metros del usuario
        args: Argumentos de l√≠nea de comandos
    """
    print(f"\nüìä Generando reportes finales...")
    
    try:
        # Preparar configuraci√≥n de evaluaci√≥n
        config_evaluacion = {
            "raza": parametros_usuario["raza"],
            "edad_dias": parametros_usuario["edad_dias"],
            "peso_actual": parametros_usuario["peso_actual"],
            "peso_objetivo": parametros_usuario["peso_objetivo"],
            "cantidad_pollos": parametros_usuario["cantidad_pollos"]
        }
        
        # Generar reporte completo
        incluir_graficas = not args.sin_graficas
        reporte_completo = generar_reporte_sistema_completo(
            resultados,
            INGREDIENTES,
            config_evaluacion,
            parametros_usuario.get("restricciones_usuario"),
            incluir_graficas=incluir_graficas,
            exportar_archivos=True
        )
        
        if "error" in reporte_completo:
            print(f"‚ö†Ô∏è  Error generando reportes: {reporte_completo['error']}")
        else:
            print(f"‚úÖ Reportes generados exitosamente")
            if reporte_completo.get("archivos_generados"):
                print(f"üìÅ Archivos creados:")
                for archivo in reporte_completo["archivos_generados"]:
                    print(f"   ‚Ä¢ {archivo}")
        
        # Mostrar resumen de las mejores soluciones
        mostrar_resumen_soluciones(resultados)
        
    except Exception as e:
        print(f"‚ùå Error generando reportes: {e}")

def mostrar_resumen_soluciones(resultados):
    """
    Muestra un resumen de las mejores soluciones encontradas
    
    Args:
        resultados: Resultados del algoritmo gen√©tico
    """
    mejores_individuos = resultados.get("mejores_individuos", [])
    
    if not mejores_individuos:
        print("‚ö†Ô∏è  No se encontraron soluciones v√°lidas")
        return
    
    print(f"\nüèÜ RESUMEN DE MEJORES SOLUCIONES")
    print("=" * 50)
    
    for i, individuo in enumerate(mejores_individuos[:3]):
        print(f"\nü•á Soluci√≥n #{i+1}:")
        print(f"   üí∞ Costo: ${individuo.costo_total:.3f}/kg")
        print(f"   üìä Fitness: {individuo.fitness:.4f}")
        
        if hasattr(individuo, 'conversion_alimenticia'):
            print(f"   ‚ö° Conversi√≥n alimenticia: {individuo.conversion_alimenticia:.2f}")
        
        if hasattr(individuo, 'dias_peso_objetivo'):
            print(f"   ‚è±Ô∏è  D√≠as hasta peso objetivo: {individuo.dias_peso_objetivo:.0f}")
        
        # Mostrar ingredientes principales
        ingredientes_principales = []
        for j, porcentaje in enumerate(individuo.porcentajes):
            if porcentaje > 0.05 and j < len(INGREDIENTES):  # M√°s del 5%
                ingredientes_principales.append((INGREDIENTES[j]["nombre"], porcentaje * 100))
        
        if ingredientes_principales:
            print(f"   ü•ú Ingredientes principales:")
            for nombre, porcentaje in sorted(ingredientes_principales, key=lambda x: x[1], reverse=True)[:3]:
                print(f"      ‚Ä¢ {nombre}: {porcentaje:.1f}%")
    
    print("=" * 50)

def mostrar_ayuda_usuario():
    """
    Muestra ayuda adicional al usuario
    """
    print(f"""
üìñ AYUDA ADICIONAL

Archivos de configuraci√≥n:
  Los par√°metros se pueden guardar en archivos JSON para reutilizaci√≥n.
  Use --config para cargar y --guardar-config para guardar.

Interpretaci√≥n de resultados:
  ‚Ä¢ Fitness: Menor es mejor (representa calidad global)
  ‚Ä¢ Costo: Precio por kilogramo de alimento
  ‚Ä¢ Conversi√≥n alimenticia: kg alimento / kg ganancia (menor es mejor)
  
Archivos generados:
  ‚Ä¢ reporte_optimizacion.txt: Reporte legible
  ‚Ä¢ reporte_optimizacion.json: Datos estructurados
  ‚Ä¢ graficas/: Visualizaciones del proceso y resultados

Para m√°s informaci√≥n, consulte la documentaci√≥n del sistema.
    """)

if __name__ == "__main__":
    try:
        sys.exit(main())
    except Exception as e:
        print(f"\nüí• Error cr√≠tico: {e}")
        sys.exit(1)