"""
M√≥dulo de pesta√±as para la interfaz gr√°fica de boilerNutri
ACTUALIZADO para incluir funcionalidades de evoluci√≥n de fitness
"""

# Importaciones principales de las pesta√±as
from .parametros_tab import ParametrosTab
from .ingredientes_tab import IngredientesTab
from .optimizacion_tab import OptimizacionTab  # Ahora incluye evoluci√≥n de fitness
from .resultados_tab import ResultadosTab

# Verificar disponibilidad de dependencias para fitness evolution
try:
    import matplotlib.pyplot as plt
    import matplotlib.animation as animation
    MATPLOTLIB_AVAILABLE = True
except ImportError:
    MATPLOTLIB_AVAILABLE = False
    import warnings
    warnings.warn("Matplotlib no disponible - algunas funcionalidades de visualizaci√≥n pueden estar limitadas")

# Informaci√≥n del m√≥dulo
__version__ = "1.1.0"  # Actualizada por nueva funcionalidad de fitness evolution
__all__ = [
    'ParametrosTab',
    'IngredientesTab', 
    'OptimizacionTab',
    'ResultadosTab'
]

def verificar_dependencias():
    """
    Verifica que todas las dependencias necesarias est√©n disponibles
    """
    dependencias = {
        'tkinter': True,  # Siempre disponible en Python est√°ndar
        'matplotlib': MATPLOTLIB_AVAILABLE,
        'numpy': True  # Asumido disponible
    }
    
    print("üîç Verificando dependencias de GUI:")
    for dep, disponible in dependencias.items():
        status = "‚úÖ" if disponible else "‚ùå"
        print(f"  {status} {dep}")
    
    if not MATPLOTLIB_AVAILABLE:
        print("\n‚ö†Ô∏è  Recomendaci√≥n: Instale matplotlib para visualizaci√≥n completa:")
        print("   pip install matplotlib>=3.0")
    
    return all(dependencias.values())

def obtener_info_tabs():
    """
    Obtiene informaci√≥n sobre las pesta√±as disponibles
    """
    tabs_info = {
        'ParametrosTab': {
            'descripcion': 'Configuraci√≥n de par√°metros de producci√≥n',
            'funcionalidades': [
                'Selecci√≥n de raza de pollos',
                'Configuraci√≥n de pesos y edad',
                'Par√°metros de producci√≥n'
            ]
        },
        'IngredientesTab': {
            'descripcion': 'Gesti√≥n de ingredientes disponibles',
            'funcionalidades': [
                'Selecci√≥n de ingredientes',
                'Visualizaci√≥n de precios y nutrici√≥n',
                'Actualizaci√≥n de disponibilidad'
            ]
        },
        'OptimizacionTab': {
            'descripcion': 'Ejecuci√≥n y monitoreo de optimizaci√≥n',
            'funcionalidades': [
                'Control del algoritmo gen√©tico',
                'Monitoreo en tiempo real',
                'Visualizaci√≥n de evoluci√≥n de fitness',  # NUEVO
                'M√©tricas de convergencia',              # NUEVO
                'Reportes de evoluci√≥n'                  # NUEVO
            ],
            'nuevas_funcionalidades': [  # DESTACAR LO NUEVO
                'Gr√°ficas de evoluci√≥n de fitness en tiempo real',
                'Tracking de diversidad poblacional',
                'An√°lisis de convergencia autom√°tico',
                'Exportaci√≥n de gr√°ficas de evoluci√≥n',
                'Reportes detallados de m√©tricas'
            ]
        },
        'ResultadosTab': {
            'descripcion': 'Visualizaci√≥n y exportaci√≥n de resultados',
            'funcionalidades': [
                'Comparaci√≥n de mejores soluciones',
                'An√°lisis nutricional detallado',
                'Exportaci√≥n de reportes',
                'Gr√°ficas de composici√≥n'
            ]
        }
    }
    
    return tabs_info

def crear_tabs_en_notebook(notebook, main_window):
    """
    Funci√≥n de conveniencia para crear todas las pesta√±as en un notebook
    
    Args:
        notebook: ttk.Notebook donde agregar las pesta√±as
        main_window: Referencia a la ventana principal
    
    Returns:
        dict: Diccionario con referencias a todas las pesta√±as creadas
    """
    try:
        # Crear pesta√±as
        tabs = {}
        
        # Pesta√±a 1: Par√°metros
        tabs['parametros'] = ParametrosTab(notebook, main_window)
        notebook.add(tabs['parametros'].frame, text="üìä Configuraci√≥n de Producci√≥n")
        
        # Pesta√±a 2: Ingredientes  
        tabs['ingredientes'] = IngredientesTab(notebook, main_window)
        notebook.add(tabs['ingredientes'].frame, text="üåæ Ingredientes Disponibles")
        
        # Pesta√±a 3: Optimizaci√≥n (con evoluci√≥n de fitness)
        tabs['optimizacion'] = OptimizacionTab(notebook, main_window)
        tab_text = "üß¨ Optimizaci√≥n"
        if MATPLOTLIB_AVAILABLE:
            tab_text += " + Evoluci√≥n"  # Indicar funcionalidad extra
        notebook.add(tabs['optimizacion'].frame, text=tab_text)
        
        # Pesta√±a 4: Resultados
        tabs['resultados'] = ResultadosTab(notebook, main_window)
        notebook.add(tabs['resultados'].frame, text="üìà Resultados")
        
        print(f"‚úÖ {len(tabs)} pesta√±as creadas exitosamente")
        
        if MATPLOTLIB_AVAILABLE:
            print("üéØ Funcionalidades de evoluci√≥n de fitness habilitadas")
        
        return tabs
        
    except Exception as e:
        print(f"‚ùå Error creando pesta√±as: {e}")
        raise

def mostrar_ayuda_evoluccion_fitness():
    """
    Muestra informaci√≥n de ayuda sobre las nuevas funcionalidades de evoluci√≥n de fitness
    """
    ayuda = """
    üß¨ NUEVA FUNCIONALIDAD: EVOLUCI√ìN DE FITNESS
    
    üìà ¬øQu√© es?
    Sistema de visualizaci√≥n en tiempo real que muestra c√≥mo evoluciona
    el algoritmo gen√©tico durante la optimizaci√≥n.
    
    üìä Gr√°ficas Incluidas:
    ‚Ä¢ Evoluci√≥n del Fitness: Mejor, promedio y peor fitness por generaci√≥n
    ‚Ä¢ Diversidad Poblacional: Qu√© tan diversa es la poblaci√≥n
    ‚Ä¢ M√©tricas de Convergencia: Cu√°ndo y c√≥mo converge el algoritmo
    
    üîß Funcionalidades:
    ‚Ä¢ Visualizaci√≥n en tiempo real durante optimizaci√≥n
    ‚Ä¢ Exportaci√≥n de gr√°ficas en m√∫ltiples formatos
    ‚Ä¢ Reportes autom√°ticos de m√©tricas de evoluci√≥n
    ‚Ä¢ Detecci√≥n de convergencia prematura
    ‚Ä¢ An√°lisis de estabilidad del algoritmo
    
    üí° C√≥mo usar:
    1. Configure sus par√°metros en la pesta√±a de Configuraci√≥n
    2. Vaya a la pesta√±a de Optimizaci√≥n + Evoluci√≥n
    3. Inicie la optimizaci√≥n y observe las gr√°ficas en tiempo real
    4. Use los botones para guardar gr√°ficas o ver reportes detallados
    
    üìã M√©tricas Disponibles:
    ‚Ä¢ Tasa de mejora promedio
    ‚Ä¢ Generaciones sin mejora
    ‚Ä¢ Nivel de estabilidad
    ‚Ä¢ Diversidad poblacional
    ‚Ä¢ Detecci√≥n de convergencia prematura
    """
    
    return ayuda

# Inicializaci√≥n del m√≥dulo
if __name__ == "__main__":
    # Si se ejecuta directamente, mostrar informaci√≥n
    print("üñ•Ô∏è  M√≥dulo de pesta√±as de boilerNutri")
    print(f"üìå Versi√≥n: {__version__}")
    
    verificar_dependencias()
    
    print("\nüìã Pesta√±as disponibles:")
    tabs_info = obtener_info_tabs()
    for nombre, info in tabs_info.items():
        print(f"\nüîπ {nombre}")
        print(f"   {info['descripcion']}")
        if 'nuevas_funcionalidades' in info:
            print("   ‚ú® Nuevas funcionalidades:")
            for func in info['nuevas_funcionalidades']:
                print(f"     ‚Ä¢ {func}")
    
    if MATPLOTLIB_AVAILABLE:
        print("\n" + mostrar_ayuda_evoluccion_fitness())